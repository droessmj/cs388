Lab 0: Home is wherever I'm with Unix
=====================================

Group Members
-------------
Michael Droessler <droessmj@uwec.edu>

Answers
-------
1.
	1. To check the current location, 'pwd'
	2. To create a specific directory, 'mkdir -p unix/rules/
	3. To move to the location, 'cd unix/rules/'
	4. To list contents of this directory, 'ls'
	5. To create an empty file, 'touch so.much'
	6. To view contents of file, 'cat so.much'
	7. To rename the file, 'mv so.much windows.drools'
	8. To remove the file, 'rm windows.drools'
	9. To change to HOME directory, 'cd ~/'
	10. To remove directory, 'rmdir -p  unix/rules/'
2. 'less file.name', press Spacebar to move to next page 
3. curl -L https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.13.tar.xz | tar xz 
4. "control + z" to suspend session  , "fg 1" to resume seesion
5. "control + C" to exit , otherwise open another terminal, find the process using ps -ef|grep , find the process ID (pid), and use the kill command: kill $jobnumber where $jobnumber is the id that is returned
6. You can restore your shell with 'reset'. This happens due to non-ASCII characters messing with the shell's interpretation of commands.
7. You can use 'mesg n' to stop messages from coming in. You would refresh your screen with 'clear'.
8. "Control + D"
9.
	1. 'rm images/*'
	2. 'rm IMG_000?.JPG '
	3. 'rm img_00*'
10. You need to modify the $PATH variable. You would append the location of the program to the path by 'PATH=$PATH:./fileLocation' 
11. The variable to change is $PS1. To make the change persist, the change must be made in ~/.bash_profile or ~/profile. You would then add the change within this file.
12. 
	1. Include an ampersand '&' when calling the program, 'ls &'
	2. Use the following command to list background jobs, 'jobs'
	3. To see all processes from a user, 'ps -u USERNAME'
	4. To bring a background job to the foreground, 'fg JOB-ID' where JOB-ID is the number of the background process
	5. To kill a background job, 'kill PID' or 'killall -9 process-name' 
13. 
Standard input, output, and error are standarized streams of data that can be handled and piped between programs and files in Unix systems. 
	1. To stream input, 'cat < list.txt'
	2. To file output, 'list -la  > list.txt'
	3. To push output to a program, then store it as a file 'file * | grep directory > directory.txt'
14. To make this change, simply go the the .bash_profile and add the command 'alias ls='ls -la''
15. To date, all my experience is in nano. I will stick with what I know unless something else is proven to be better. If that happens, I'll switch editors with a smile on my face.

Comments
--------
